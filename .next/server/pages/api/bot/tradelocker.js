"use strict";(()=>{var e={};e.id=561,e.ids=[561],e.modules={3524:e=>{e.exports=require("@prisma/client")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6113:e=>{e.exports=require("crypto")},6713:(e,t,r)=>{r.r(t),r.d(t,{config:()=>j,default:()=>y,routeModule:()=>w});var a={};r.r(a),r.d(a,{default:()=>u});var s=r(1802),o=r(7153),n=r(6249),i=r(6874);async function u(e,t){if("POST"!==e.method)return t.status(405).json({error:"Method not allowed"});try{let{action:r,config:a,tradeData:s}=e.body;switch(r){case"execute_trade":return await c(e,t,a,s);case"check_balance":return await d(e,t,a);case"check_positions":return await l(e,t,a);case"close_position":return await f(e,t,a,s);case"can_trade":return await p(e,t,a,s);case"get_price":return await m(e,t,a,s);default:return t.status(400).json({error:"Invalid bot action"})}}catch(e){return console.error("TradeLocker Bot API error:",e),t.status(500).json({error:"Bot trading error",details:e.message})}}async function c(e,t,r,a){try{let e;let{symbol:s,side:o,quantity:n,orderType:u,price:c,stopLoss:d,takeProfit:l}=a;if(!s||!o||!n)return t.status(400).json({error:"Symbol, side, and quantity are required for bot trade"});let f=new i.f(r);if(!await f.canBotTrade(s,n,o))return t.status(400).json({error:"Bot cannot execute trade - insufficient margin or risk limits exceeded"});if("market"===u)e=await f.placeBotMarketOrder({symbol:s,side:o,type:"market",quantity:parseFloat(n),stopLoss:d?parseFloat(d):void 0,takeProfit:l?parseFloat(l):void 0});else{if("limit"!==u)return t.status(400).json({error:"Invalid order type for bot"});if(!c)return t.status(400).json({error:"Price is required for limit orders"});e=await f.placeBotLimitOrder({symbol:s,side:o,type:"limit",quantity:parseFloat(n),price:parseFloat(c),stopLoss:d?parseFloat(d):void 0,takeProfit:l?parseFloat(l):void 0})}return t.status(200).json({success:!0,data:e,message:`Bot trade executed: ${o} ${n} ${s}`})}catch(e){return t.status(400).json({error:e.message})}}async function d(e,t,r){try{let e=new i.f(r),a=await e.getBotBalance();return t.status(200).json({success:!0,data:a})}catch(e){return t.status(400).json({error:e.message})}}async function l(e,t,r){try{let e=new i.f(r),a=await e.getBotPositions();return t.status(200).json({success:!0,data:a})}catch(e){return t.status(400).json({error:e.message})}}async function f(e,t,r,a){try{let{symbol:e,quantity:s}=a;if(!e)return t.status(400).json({error:"Symbol is required for bot position close"});let o=new i.f(r),n=await o.closeBotPosition(e,s?parseFloat(s):void 0);return t.status(200).json({success:!0,data:n,message:`Bot position closed: ${e}`})}catch(e){return t.status(400).json({error:e.message})}}async function p(e,t,r,a){try{let{symbol:e,quantity:s,side:o}=a;if(!e||!s||!o)return t.status(400).json({error:"Symbol, quantity, and side are required"});let n=new i.f(r),u=await n.canBotTrade(e,parseFloat(s),o);return t.status(200).json({success:!0,data:{canTrade:u},message:u?"Bot can execute trade":"Bot cannot execute trade - risk limits exceeded"})}catch(e){return t.status(400).json({error:e.message})}}async function m(e,t,r,a){try{let{symbol:e}=a;if(!e)return t.status(400).json({error:"Symbol is required for price check"});let s=new i.f(r),o=await s.getCurrentPrice(e);return t.status(200).json({success:!0,data:{symbol:e,price:o},message:`Current price for ${e}: ${o}`})}catch(e){return t.status(400).json({error:e.message})}}let y=(0,n.l)(a,"default"),j=(0,n.l)(a,"config"),w=new s.PagesAPIRouteModule({definition:{kind:o.x.PAGES_API,page:"/api/bot/tradelocker",pathname:"/api/bot/tradelocker",bundlePath:"",filename:""},userland:a})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[272],()=>r(6713));module.exports=a})();